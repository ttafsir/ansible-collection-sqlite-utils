---
- hosts: localhost
  gather_facts: no
  vars:
    where_arg: {"subject": "Peek #4"}
    database: "database.sqlite"

  tasks:
    - name: BLOCK | Create a SQLite database and insert sample data
      block:
        - name: Insert sample data into emails table in JSON
          copy:
            content: |
              [
                {"email_id": 1, "subject": "Hello World", "body": "First email body"},
                {"email_id": 2, "subject": "Meeting Tomorrow", "body": "Reminder for the meeting"},
                {"email_id": 3, "subject": "Peek #4", "body": "Content of Peek #4"},
                {"email_id": 4, "subject": "Final Notice", "body": "This is your final notice"}
              ]
            dest: "emails.json"

        - name: Create the emails table in SQLite using sqlite-utils CLI
          command: "sqlite-utils insert database.sqlite emails emails.json  --pk=email_id"
          register: create_db_result

      rescue:
        - name: if UNIQUE constraint failed, the just print the error
          debug:
            msg: "UNIQUE constraint failed"
          when: create_db_result.stderr.find("UNIQUE constraint failed") != -1

    - name: Fetch data from database
      ttafsir.sqlite_utils.run_sql:
        db_path: database.sqlite
        query: "SELECT * FROM emails ORDER BY email_id"
      register: query_result

    - name: TEST | verify that row count is 4
      assert:
        that:
          - query_result.rows|length == 4
        fail_msg: "The number of rows in the emails table is not 4"

    - name: Fetch data based on ID
      ttafsir.sqlite_utils.run_sql:
        db_path: database.sqlite
        query: "SELECT * FROM emails WHERE email_id = ?;"
        params: [3]
      register: query_result_params

    - name: TEST | Fetch data based on ID
      assert:
        that:
          - query_result_params.rows[0].subject == where_arg.subject
        fail_msg: "The subject of the email with ID 4 is not {{ where_arg.subject }}"

    - name: Fetch data based on name and age
      ttafsir.sqlite_utils.run_sql:
        db_path: database.sqlite
        query: |-
          SELECT * FROM emails
          WHERE subject = :subject
          AND email_id = :email_id
        params:
          subject: "Hello World"
          email_id: 1
      register: query_result_params

    - name: Update data based on ID
      ttafsir.sqlite_utils.run_sql:
        db_path: database.sqlite
        query: "UPDATE emails SET subject = ? WHERE email_id = ?;"
        params: ["Hello World Updated", 1]
      register: update_result
